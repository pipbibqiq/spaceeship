// Класс, представляющий космический корабль
public class Spaceship {
    private final String name;           // Название корабля
    private final int maxSpeed;        // Максимальная скорость корабля
    private final int crewSize;      // Размер экипажа корабля
    private boolean isDocked;      // Статус корабля в ангаре
    private boolean isInSpace;   // Статус корабля в космосе
    private boolean isStart;   // Статус корабля на стартовой площадке
    private final String propulsionType;  // Тип двигателя корабля

    // Конструктор класса для создания корабля с начальными характеристиками
    public Spaceship(String name, int maxSpeed, int crewSize, String propulsionType) {
        this.name = name;            //Название корабля не меняется (Указывается при создании в классе Main)
        this.maxSpeed = maxSpeed;   //Максимальная скорость корабля не меняется (Указывается при создании в классе Main)
        this.crewSize = crewSize;  //Количество экипажа корабля не меняется (Указывается при создании в классе Main)
        this.isDocked = true;     // При создании корабль всегда в ангаре
        this.isStart = false;    // При создании корабль не находится на стартовой площадке
        this.isInSpace = false; // При создании корабль не находится в космосе
        this.propulsionType = propulsionType; //Тип двигателя корабля не меняется (Указывается при создании в классе Main)
    }

    // Метод для помещения корабля на старт
    public void start() {
        if (isDocked && !isInSpace) { // Если корабль в ангаре И не в космосе (символ ! - "не")
            isDocked = false;        // Значит мы его забираем из ангара
            isStart = true;         // И помещаем на стартовую площадку
                                   //Параметр нахождения корабля в космосе "isInSpace" остаётся без изменений (он остаётся НЕ в космосе), поэтому его тут писать не нужно
            System.out.println("\n" + name + " на старте.\n");
        } else {
            System.out.println("\n" + name + " не может быть помещён на стартовую площадку, так как он либо уже там, либо он в космосе.\n");
        }
    }

    // Метод для помещения корабля в ангар
    public void dock() {
        if (!isDocked && !isInSpace) { // Если корабль не в ангаре И не в космосе (символ ! - "не")
            isDocked = true;          // Значит мы его помещаем в ангара
            isStart = false;         // И убираем со стартовой площадки
                                    //Параметр нахождения корабля в космосе "isInSpace" остаётся без изменений (он остаётся НЕ в космосе), поэтому его тут писать не нужно
            System.out.println("\n" + name + " в ангаре.\n");
        } else {
            System.out.println("\n" + name + " не может быть помещён в ангар, так как он либо уже там, либо он в космосе.\n");
        }
    }

    // Метод для отправки корабля в космос
    public void launch() {
        if (isStart && !isDocked) { // Если корабль на стартовой площадке И не в ангаре (символ ! - "не")
            isStart = false;       // Значит мы его убираем со стартовой площадки
            isInSpace = true;     // И добавляем в космос (значение isInSpace(в космосе) = да)
                                 //Параметр нахождения корабля в ангаре "isDocked" остаётся без изменений (он остаётся НЕ в ангаре), поэтому его тут писать не нужно
            System.out.println("\n" + name + " отправляется в космос.\n");
        } else {
            System.out.println("\n" + name + " не может отправиться в космос, так как не помещён на стартовую площадку.\n");
        }
    }

    // Метод для возвращения корабля из космоса
    public void returnFromSpace() {
        if (isInSpace) {          //Если корабль в космосе (и мы его хотим вернуть)
            isInSpace = false;   // Значит мы его убираем из космоса
            isDocked = true;    // И помещаем в ангар (условно корабль вернулся и мы его сразу в ангар)
                               //Параметр нахождения корабля на стартовой площадке "isStart" остаётся без изменений (он остаётся НЕ на стартовой площадке), поэтому его тут писать не нужно
            System.out.println("\n" + name + " Возвращается из космоса.\n");
        } else {
            System.out.println("\n" + name + " Не может вернуться из космоса, так как не находится там.\n");
        }
    }

    // Метод для вывода информации о корабле
    public void printShipInfo() {
        System.out.println("\nКосмический корабль: " + name);
        System.out.println("Максимальная скорость: " + maxSpeed);
        System.out.println("Размер экипажа: " + crewSize);
        System.out.println("Статус: " + (isInSpace ? "В космосе" : (isStart ? "На стартовой площадке" : "В ангаре")));
        System.out.println("Тип двигателя: " + propulsionType);
    }
}